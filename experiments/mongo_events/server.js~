var express         =   require("express");
var app             =   express();
var bodyParser      =   require("body-parser");
var session         =   require('express-session');
var HamletData      =   require("./hamletdata");
var router          =   express.Router();
var mongoose        =   require('mongoose'); 
var cors	    =   require('cors');
var atob	    =   require('atob');
var mongoWatch	    =   require('mongo-oplog-watch');
var csvWriter       =   require('csv-write-stream');
var fs              =   require('fs');

var watcher = mongoWatch('mongodb://localhost:27017/spatioDb');
watcher.on('insert', function(doc) {
   console.log("inserted!");
   //console.log(doc);
   console.log(doc.object.params.noOfHouses);
    var stream = HamletData.find().stream();

    stream.on('data', function (doc) {
    // do something with the mongoose document
     console.log(doc);
     var writer = csvWriter({sendHeaders: false})
     writer.pipe(fs.createWriteStream('out.csv',{'flags': 'a','encoding': null,'mode': 0666}))
     writer.write({hello: "world", foo: "bar", baz: "taco"})
     writer.end()
    }).on('error', function (err) {
    // handle the error
    }).on('close', function () {
    // the stream is closed
    });
});

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended : false}));
app.use(session({secret:"garbage",resave:false,saveUninitialized:true}));
app.use(cors());
app.options('*',cors());
app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
  next();
});


router.route("/submitData")
    .get(function(req,res){
	console.log("GET:got a server req");
        //todo
    })
    .post(function(req,res){
	console.log("Data submit request");
        var newData = new HamletData();
        var response = {};
        // fetch email and password from REST request.
        // Add strict validation when you use this in Production.
	// <<<Validations here>>>
        // Hash the password using SHA1 algorithm.
        if(req.body.district !== undefined)
	    {newData.district = req.body.district;}
        if(req.body.mandal !== undefined)
            {newData.mandal = req.body.mandal;} 
        if(req.body.gramPanchayat !== undefined)
            {newData.gramPanchayat = req.body.gramPanchayat;}     
        if(req.body.hamlet !== undefined)
            {newData.hamlet = req.body.hamlet;}        
        if(req.body.params !== undefined)
            {newData.params = req.body.params;}        
           
        newData.save(function(err){
        // save() will run insert() command of MongoDB.
        // it will add new data in collection.
            if(err) {
	console.log("Error saving data in DB:" + err);
                response = {"error" : true,"message" : "Error adding data-->"+err.message};
            } else {
                response = {"error" : false,"message" : "Data added"};
                //response = ['1','2','3'];
            }
            res.json(response)
        });
    });


function uploadFile()
{
    var ACCESS_TOKEN = "9_noGBalGhwAAAAAAAAEQFCmScsklCoPt0tIahkQ2Yo_PceTp7dmT4Jta1UUlhVS";
      var dbx = new Dropbox({ accessToken: ACCESS_TOKEN });
      //var fileInput = document.getElementById('file-upload');
      //var file = fileInput.files[0];
      dbx.filesUpload({path: '/' + file.name, contents: file})
        .then(function(response) {
          var results = document.getElementById('results');
          results.appendChild(document.createTextNode('File uploaded!'));
          console.log(response);
        })
        .catch(function(error) {
          console.error(error);
        });
      return false;
}    

app.use('/',router);
app.listen(3006);

console.log("hamletdataapp Listening to PORT 3006");


